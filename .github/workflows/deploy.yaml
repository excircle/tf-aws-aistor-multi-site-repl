name: MinIO Deployment

on:
  push:
    branches:
      - main

env:
  destroy: false
  branch: main
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/terraform/.plugin-cache

jobs:
  set-condition:
    runs-on: ubuntu-latest
    outputs:
      run-job: ${{ steps.set-output.outputs.RUN_JOB }}
    steps:
      - name: Set condition
        id: set-output
        run: |
          echo "RUN_JOB=${{ env.destroy }}" >> $GITHUB_OUTPUT
  aws-build:
    needs: set-condition
    if: needs.set-condition.outputs.run-job == 'false'
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: "us-west-2"
      TF_S3_BUCKET: "minio-terraform-state041125"
      TF_S3_KEY: "terraform.tfstate"
      KEY_FILE: "/home/runner/sre-key"
    steps:
      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_DEFAULT_REGION

      - name: Check if S3 Bucket Exists
        id: check-bucket
        run: |
          if aws s3api head-bucket --bucket $TF_S3_BUCKET 2>/dev/null; then
            echo "bucket_exists=true" >> $GITHUB_ENV
          else
            echo "bucket_exists=false" >> $GITHUB_ENV
          fi
    
      - name: Create AWS S3 bucket
        if: env.bucket_exists == 'false'
        run: |
          aws s3api create-bucket --bucket $TF_S3_BUCKET --region $AWS_DEFAULT_REGION --create-bucket-configuration LocationConstraint=$AWS_DEFAULT_REGION
          aws s3api put-object --bucket $TF_S3_BUCKET --key $TF_S3_KEY

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main #<- Define the branch you wish to use!

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Create Plugin Cache Dir
        run: mkdir ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: Initialize Multi-Site Repl VPC (Terraform)
        working-directory: ./terraform/
        run: export TF_PLUGIN_CACHE_DIR=${{ env.TF_PLUGIN_CACHE_DIR }}; terraform init -backend-config="bucket=${TF_S3_BUCKET}" -backend-config="key=${TF_S3_KEY}" -backend-config="region=${AWS_DEFAULT_REGION}"

      - name: Apply MinIO VPC & Nodes
        working-directory: ./terraform/
        run: terraform apply -target=module.minio-vpc-west-2 -target=module.minio-us-west-2-cluster1 -target=module.minio-us-west-2-cluster2 -target=module.minio-us-west-2-cluster3 -auto-approve -var="sshkey=$(echo "${{ secrets.PUBLIC_SSHKEY }}" | base64 --decode)" -var="minio_license=${{ secrets.MINIO_LICENSE }}"

      - name: Apply MinIO Disks
        working-directory: ./terraform/
        run: terraform apply -target=module.minio-west-2-cluster1-disks -target=module.minio-west-2-cluster2-disks -target=module.minio-west-2-cluster3-disks -auto-approve -var="sshkey=$(echo "${{ secrets.PUBLIC_SSHKEY }}" | base64 --decode)" -var="minio_license=${{ secrets.MINIO_LICENSE }}"

      - name: Decode SSH key
        run: |
          base64 -d <<< '${{ secrets.PRIVATE_SSHKEY }}' > ${{ env.KEY_FILE }}
          chmod 0600 ${{ env.KEY_FILE }}

      - name: Validate SSH key
        run: ssh-keygen -l -f ${{ env.KEY_FILE }}
        
      - name: Obtain the Public IP of cluster1-1
        run: |
          echo "cluster1=$(aws ec2 describe-instances --region us-west-2 \
          --filters "Name=tag:Name,Values=minio-us-west-2-cluster1-1" \
          --query "Reservations[*].Instances[*].PublicIpAddress" \
          --output text)" >> $GITHUB_ENV

      - name: Call replicate.sh on cluster1-1
        run: ssh -i ${{ env.KEY_FILE }} -o StrictHostKeyChecking=no ubuntu@${{ env.cluster1 }} "curl -sL https://raw.githubusercontent.com/excircle/tf-aws-aistor-multi-site-repl/main/replicate.sh | /bin/bash"
  


  destroy:
    needs: set-condition
    if: needs.set-condition.outputs.run-job == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: "us-west-2"
      TF_S3_BUCKET: "minio-terraform-state041125"
      TF_S3_KEY: "terraform.tfstate"
      TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/terraform/.plugin-cache
    steps:
      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_DEFAULT_REGION
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main #<- Define the branch you wish to use.

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Create Plugin Cache Dir
        run: mkdir ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: Initialize Multi-Site Repl VPC (Terraform)
        working-directory: ./terraform/
        run: export TF_PLUGIN_CACHE_DIR=${{ env.TF_PLUGIN_CACHE_DIR }}; terraform init -backend-config="bucket=${TF_S3_BUCKET}" -backend-config="key=${TF_S3_KEY}" -backend-config="region=${AWS_DEFAULT_REGION}"

      - name: Destroy Disks 
        working-directory: ./terraform/
        run: terraform destroy -target=module.minio-west-2-cluster1-disks -target=module.minio-west-2-cluster2-disks -target=module.minio-west-2-cluster3-disks -var="sshkey=$(echo "${{ secrets.PUBLIC_SSHKEY }}" | base64 --decode)" -var="minio_license=${{ secrets.MINIO_LICENSE }}" -auto-approve -lock=false

      - name: Destroy Nodes
        working-directory: ./terraform/
        run: terraform destroy -target=module.minio-us-west-2-cluster1 -target=module.minio-us-west-2-cluster2 -target=module.minio-us-west-2-cluster3 -var="sshkey=$(echo "${{ secrets.PUBLIC_SSHKEY }}" | base64 --decode)" -var="minio_license=${{ secrets.MINIO_LICENSE }}" -auto-approve -lock=false

      - name: Destroy VPC
        working-directory: ./terraform/
        run: terraform destroy -target=module.minio-vpc-west-2 -var="sshkey=$(echo "${{ secrets.PUBLIC_SSHKEY }}" | base64 --decode)" -var="minio_license=${{ secrets.MINIO_LICENSE }}" -auto-approve -lock=false
